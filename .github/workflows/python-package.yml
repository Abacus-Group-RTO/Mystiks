# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set up Rust Toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1.5.0
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # TODO: Write tests for pytest.
        python -m pip install flake8 build
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # We stop the build if there are Python syntax errors or undefined names.
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # "exit-zero" treats all errors as warnings.
        flake8 . --count --exit-zero --max-complexity=10 --statistics --ignore=E501,E711
    # - name: Test with pytest
    #   run: |
    #     pytest
    - name: Compile Mystik Core
      working-directory: ./mystik_core
      run: |
        # We strip the "." out of the Python version.
        python_release=${{ matrix.python-version }}
        python_release=${python_release/./}
        # We compile Mystik Core in release mode and strip symbols.
        maturin build --release --strip
        # We copy the compiled library back into the main Python library.
        cp ./target/release/libmystik_core.so ../mystik/mystik_core.cpython-${python_release}-x86_64-linux-gnu.so
    - name: Build the package
      run: |
        python -m build
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: artifacts-${{ matrix.python-version }}
        path: ./dist/*
        if-no-files-found: error
